
simple_game.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004ca  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002e  00800060  000004ca  0000053e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  0000056c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000c38  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000e0  00000000  00000000  00000cc0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a56  00000000  00000000  00000da0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000033b  00000000  00000000  000017f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000836  00000000  00000000  00001b31  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000100  00000000  00000000  00002368  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000018d  00000000  00000000  00002468  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001e5  00000000  00000000  000025f5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ec       	ldi	r30, 0xCA	; 202
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 38       	cpi	r26, 0x8E	; 142
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ae e8       	ldi	r26, 0x8E	; 142
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 38       	cpi	r26, 0x8E	; 142
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 1b 02 	call	0x436	; 0x436 <main>
  8a:	0c 94 63 02 	jmp	0x4c6	; 0x4c6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <keypad_init>:
	'-','3','2','1',
	'+','=','0','C'
};

void keypad_init(){
	CLRBIT(DDRD,2);
  92:	8a 98       	cbi	0x11, 2	; 17
	CLRBIT(DDRD,3);
  94:	8b 98       	cbi	0x11, 3	; 17
	CLRBIT(DDRD,4);
  96:	8c 98       	cbi	0x11, 4	; 17
	CLRBIT(DDRD,5);
  98:	8d 98       	cbi	0x11, 5	; 17
	PORTD |= 0b00111100; // internal pull up in case of protues
  9a:	82 b3       	in	r24, 0x12	; 18
  9c:	8c 63       	ori	r24, 0x3C	; 60
  9e:	82 bb       	out	0x12, r24	; 18
	SETBIT(DDRB,4);
  a0:	bc 9a       	sbi	0x17, 4	; 23
	SETBIT(DDRB,5);
  a2:	bd 9a       	sbi	0x17, 5	; 23
	SETBIT(DDRB,6);
  a4:	be 9a       	sbi	0x17, 6	; 23
	SETBIT(DDRB,7);
  a6:	bf 9a       	sbi	0x17, 7	; 23
}
  a8:	08 95       	ret

000000aa <keypad_read>:
int8_t keypad_read(){
	for(uint8_t i=0;i<4;i++){
  aa:	e0 e0       	ldi	r30, 0x00	; 0
		
	PORTB = PORTB & 0b00001111;	
  ac:	88 b3       	in	r24, 0x18	; 24
  ae:	8f 70       	andi	r24, 0x0F	; 15
  b0:	88 bb       	out	0x18, r24	; 24
	if(i==0) PORTB  |= 0b11100000;
  b2:	ee 23       	and	r30, r30
  b4:	21 f4       	brne	.+8      	; 0xbe <keypad_read+0x14>
  b6:	88 b3       	in	r24, 0x18	; 24
  b8:	80 6e       	ori	r24, 0xE0	; 224
  ba:	88 bb       	out	0x18, r24	; 24
  bc:	0c c0       	rjmp	.+24     	; 0xd6 <keypad_read+0x2c>
	if(i==1) PORTB  |= 0b11010000;
  be:	e1 30       	cpi	r30, 0x01	; 1
  c0:	21 f4       	brne	.+8      	; 0xca <keypad_read+0x20>
  c2:	88 b3       	in	r24, 0x18	; 24
  c4:	80 6d       	ori	r24, 0xD0	; 208
  c6:	88 bb       	out	0x18, r24	; 24
  c8:	0b c0       	rjmp	.+22     	; 0xe0 <keypad_read+0x36>
	if(i==2) PORTB  |= 0b10110000;
  ca:	e2 30       	cpi	r30, 0x02	; 2
  cc:	21 f4       	brne	.+8      	; 0xd6 <keypad_read+0x2c>
  ce:	88 b3       	in	r24, 0x18	; 24
  d0:	80 6b       	ori	r24, 0xB0	; 176
  d2:	88 bb       	out	0x18, r24	; 24
  d4:	05 c0       	rjmp	.+10     	; 0xe0 <keypad_read+0x36>
	if(i==3) PORTB  |= 0b01110000;
  d6:	e3 30       	cpi	r30, 0x03	; 3
  d8:	19 f4       	brne	.+6      	; 0xe0 <keypad_read+0x36>
  da:	88 b3       	in	r24, 0x18	; 24
  dc:	80 67       	ori	r24, 0x70	; 112
  de:	88 bb       	out	0x18, r24	; 24
	
	if(GETBIT(PIND,2)==0) return keypad_matrix[0+4*i];
  e0:	80 b3       	in	r24, 0x10	; 16
  e2:	82 fd       	sbrc	r24, 2
  e4:	09 c0       	rjmp	.+18     	; 0xf8 <keypad_read+0x4e>
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	ee 0f       	add	r30, r30
  ea:	ff 1f       	adc	r31, r31
  ec:	ee 0f       	add	r30, r30
  ee:	ff 1f       	adc	r31, r31
  f0:	e0 5a       	subi	r30, 0xA0	; 160
  f2:	ff 4f       	sbci	r31, 0xFF	; 255
  f4:	80 81       	ld	r24, Z
  f6:	08 95       	ret
	if(GETBIT(PIND,3)==0) return keypad_matrix[1+4*i];
  f8:	80 b3       	in	r24, 0x10	; 16
  fa:	83 fd       	sbrc	r24, 3
  fc:	09 c0       	rjmp	.+18     	; 0x110 <keypad_read+0x66>
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	ee 0f       	add	r30, r30
 102:	ff 1f       	adc	r31, r31
 104:	ee 0f       	add	r30, r30
 106:	ff 1f       	adc	r31, r31
 108:	e0 5a       	subi	r30, 0xA0	; 160
 10a:	ff 4f       	sbci	r31, 0xFF	; 255
 10c:	81 81       	ldd	r24, Z+1	; 0x01
 10e:	08 95       	ret
	if(GETBIT(PIND,4)==0) return keypad_matrix[2+4*i];
 110:	80 b3       	in	r24, 0x10	; 16
 112:	84 fd       	sbrc	r24, 4
 114:	09 c0       	rjmp	.+18     	; 0x128 <keypad_read+0x7e>
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	ee 0f       	add	r30, r30
 11a:	ff 1f       	adc	r31, r31
 11c:	ee 0f       	add	r30, r30
 11e:	ff 1f       	adc	r31, r31
 120:	e0 5a       	subi	r30, 0xA0	; 160
 122:	ff 4f       	sbci	r31, 0xFF	; 255
 124:	82 81       	ldd	r24, Z+2	; 0x02
 126:	08 95       	ret
	if(GETBIT(PIND,5)==0) return keypad_matrix[3+4*i];
 128:	80 b3       	in	r24, 0x10	; 16
 12a:	85 fd       	sbrc	r24, 5
 12c:	09 c0       	rjmp	.+18     	; 0x140 <keypad_read+0x96>
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	ee 0f       	add	r30, r30
 132:	ff 1f       	adc	r31, r31
 134:	ee 0f       	add	r30, r30
 136:	ff 1f       	adc	r31, r31
 138:	e0 5a       	subi	r30, 0xA0	; 160
 13a:	ff 4f       	sbci	r31, 0xFF	; 255
 13c:	83 81       	ldd	r24, Z+3	; 0x03
 13e:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 140:	8f e9       	ldi	r24, 0x9F	; 159
 142:	9f e0       	ldi	r25, 0x0F	; 15
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <keypad_read+0x9a>
 148:	00 c0       	rjmp	.+0      	; 0x14a <keypad_read+0xa0>
 14a:	00 00       	nop
	SETBIT(DDRB,5);
	SETBIT(DDRB,6);
	SETBIT(DDRB,7);
}
int8_t keypad_read(){
	for(uint8_t i=0;i<4;i++){
 14c:	ef 5f       	subi	r30, 0xFF	; 255
 14e:	e4 30       	cpi	r30, 0x04	; 4
 150:	09 f0       	breq	.+2      	; 0x154 <keypad_read+0xaa>
 152:	ac cf       	rjmp	.-168    	; 0xac <keypad_read+0x2>
	if(GETBIT(PIND,3)==0) return keypad_matrix[1+4*i];
	if(GETBIT(PIND,4)==0) return keypad_matrix[2+4*i];
	if(GETBIT(PIND,5)==0) return keypad_matrix[3+4*i];
	_delay_ms(1);
	}    
    return -1;
 154:	8f ef       	ldi	r24, 0xFF	; 255
	}
 156:	08 95       	ret

00000158 <LCD_write_command>:
_delay_ms(20);
LCD_write_command(0x0C);
}

void LCD_write_command(uint8_t cmd){
	 RS(0);
 158:	d9 98       	cbi	0x1b, 1	; 27
	 // send most byte
	 D4(GETBIT(cmd,4));
 15a:	98 2f       	mov	r25, r24
 15c:	92 95       	swap	r25
 15e:	9f 70       	andi	r25, 0x0F	; 15
 160:	90 ff       	sbrs	r25, 0
 162:	02 c0       	rjmp	.+4      	; 0x168 <LCD_write_command+0x10>
 164:	db 9a       	sbi	0x1b, 3	; 27
 166:	01 c0       	rjmp	.+2      	; 0x16a <LCD_write_command+0x12>
 168:	db 98       	cbi	0x1b, 3	; 27
	 D5(GETBIT(cmd,5));
 16a:	98 2f       	mov	r25, r24
 16c:	92 95       	swap	r25
 16e:	96 95       	lsr	r25
 170:	97 70       	andi	r25, 0x07	; 7
 172:	90 ff       	sbrs	r25, 0
 174:	02 c0       	rjmp	.+4      	; 0x17a <LCD_write_command+0x22>
 176:	dc 9a       	sbi	0x1b, 4	; 27
 178:	01 c0       	rjmp	.+2      	; 0x17c <LCD_write_command+0x24>
 17a:	dc 98       	cbi	0x1b, 4	; 27
	 D6(GETBIT(cmd,6));
 17c:	98 2f       	mov	r25, r24
 17e:	92 95       	swap	r25
 180:	96 95       	lsr	r25
 182:	96 95       	lsr	r25
 184:	93 70       	andi	r25, 0x03	; 3
 186:	90 ff       	sbrs	r25, 0
 188:	02 c0       	rjmp	.+4      	; 0x18e <LCD_write_command+0x36>
 18a:	dd 9a       	sbi	0x1b, 5	; 27
 18c:	01 c0       	rjmp	.+2      	; 0x190 <LCD_write_command+0x38>
 18e:	dd 98       	cbi	0x1b, 5	; 27
	 D7(GETBIT(cmd,7));
 190:	88 23       	and	r24, r24
 192:	14 f4       	brge	.+4      	; 0x198 <LCD_write_command+0x40>
 194:	de 9a       	sbi	0x1b, 6	; 27
 196:	01 c0       	rjmp	.+2      	; 0x19a <LCD_write_command+0x42>
 198:	de 98       	cbi	0x1b, 6	; 27
	 EN(1);
 19a:	da 9a       	sbi	0x1b, 2	; 27
 19c:	ef e9       	ldi	r30, 0x9F	; 159
 19e:	ff e0       	ldi	r31, 0x0F	; 15
 1a0:	31 97       	sbiw	r30, 0x01	; 1
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <LCD_write_command+0x48>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <LCD_write_command+0x4e>
 1a6:	00 00       	nop
	 _delay_ms(1);
	 EN(0);
 1a8:	da 98       	cbi	0x1b, 2	; 27
 1aa:	ef e9       	ldi	r30, 0x9F	; 159
 1ac:	ff e0       	ldi	r31, 0x0F	; 15
 1ae:	31 97       	sbiw	r30, 0x01	; 1
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <LCD_write_command+0x56>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <LCD_write_command+0x5c>
 1b4:	00 00       	nop
	 _delay_ms(1);
	 
	 // send least byte
	 
	 D4(GETBIT(cmd,0));
 1b6:	80 ff       	sbrs	r24, 0
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <LCD_write_command+0x66>
 1ba:	db 9a       	sbi	0x1b, 3	; 27
 1bc:	01 c0       	rjmp	.+2      	; 0x1c0 <LCD_write_command+0x68>
 1be:	db 98       	cbi	0x1b, 3	; 27
	 D5(GETBIT(cmd,1));
 1c0:	98 2f       	mov	r25, r24
 1c2:	96 95       	lsr	r25
 1c4:	90 ff       	sbrs	r25, 0
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <LCD_write_command+0x74>
 1c8:	dc 9a       	sbi	0x1b, 4	; 27
 1ca:	01 c0       	rjmp	.+2      	; 0x1ce <LCD_write_command+0x76>
 1cc:	dc 98       	cbi	0x1b, 4	; 27
	 D6(GETBIT(cmd,2));
 1ce:	98 2f       	mov	r25, r24
 1d0:	96 95       	lsr	r25
 1d2:	96 95       	lsr	r25
 1d4:	90 ff       	sbrs	r25, 0
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <LCD_write_command+0x84>
 1d8:	dd 9a       	sbi	0x1b, 5	; 27
 1da:	01 c0       	rjmp	.+2      	; 0x1de <LCD_write_command+0x86>
 1dc:	dd 98       	cbi	0x1b, 5	; 27
	 D7(GETBIT(cmd,3));
 1de:	86 95       	lsr	r24
 1e0:	86 95       	lsr	r24
 1e2:	86 95       	lsr	r24
 1e4:	80 ff       	sbrs	r24, 0
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <LCD_write_command+0x94>
 1e8:	de 9a       	sbi	0x1b, 6	; 27
 1ea:	01 c0       	rjmp	.+2      	; 0x1ee <LCD_write_command+0x96>
 1ec:	de 98       	cbi	0x1b, 6	; 27
	 EN(1);
 1ee:	da 9a       	sbi	0x1b, 2	; 27
 1f0:	8f e9       	ldi	r24, 0x9F	; 159
 1f2:	9f e0       	ldi	r25, 0x0F	; 15
 1f4:	01 97       	sbiw	r24, 0x01	; 1
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <LCD_write_command+0x9c>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <LCD_write_command+0xa2>
 1fa:	00 00       	nop
	 _delay_ms(1);
	 EN(0);
 1fc:	da 98       	cbi	0x1b, 2	; 27
 1fe:	ef e9       	ldi	r30, 0x9F	; 159
 200:	ff e0       	ldi	r31, 0x0F	; 15
 202:	31 97       	sbiw	r30, 0x01	; 1
 204:	f1 f7       	brne	.-4      	; 0x202 <LCD_write_command+0xaa>
 206:	00 c0       	rjmp	.+0      	; 0x208 <LCD_write_command+0xb0>
 208:	00 00       	nop
	 _delay_ms(1);
}
 20a:	08 95       	ret

0000020c <LCD_init>:
 *  Author: M
 */ 
#include "LCD.h"

void LCD_init (){
INIT_LCD();
 20c:	8a b3       	in	r24, 0x1a	; 26
 20e:	8e 67       	ori	r24, 0x7E	; 126
 210:	8a bb       	out	0x1a, r24	; 26
LCD_write_command(0X3);
 212:	83 e0       	ldi	r24, 0x03	; 3
 214:	0e 94 ac 00 	call	0x158	; 0x158 <LCD_write_command>
 218:	8f e7       	ldi	r24, 0x7F	; 127
 21a:	9e e3       	ldi	r25, 0x3E	; 62
 21c:	01 97       	sbiw	r24, 0x01	; 1
 21e:	f1 f7       	brne	.-4      	; 0x21c <LCD_init+0x10>
 220:	00 c0       	rjmp	.+0      	; 0x222 <LCD_init+0x16>
 222:	00 00       	nop
_delay_ms(4);
LCD_write_command(0X3);
 224:	83 e0       	ldi	r24, 0x03	; 3
 226:	0e 94 ac 00 	call	0x158	; 0x158 <LCD_write_command>
 22a:	af e7       	ldi	r26, 0x7F	; 127
 22c:	be e3       	ldi	r27, 0x3E	; 62
 22e:	11 97       	sbiw	r26, 0x01	; 1
 230:	f1 f7       	brne	.-4      	; 0x22e <LCD_init+0x22>
 232:	00 c0       	rjmp	.+0      	; 0x234 <LCD_init+0x28>
 234:	00 00       	nop
_delay_ms(4);
LCD_write_command(0X3);
 236:	83 e0       	ldi	r24, 0x03	; 3
 238:	0e 94 ac 00 	call	0x158	; 0x158 <LCD_write_command>
 23c:	8f e7       	ldi	r24, 0x7F	; 127
 23e:	9e e3       	ldi	r25, 0x3E	; 62
 240:	01 97       	sbiw	r24, 0x01	; 1
 242:	f1 f7       	brne	.-4      	; 0x240 <LCD_init+0x34>
 244:	00 c0       	rjmp	.+0      	; 0x246 <LCD_init+0x3a>
 246:	00 00       	nop
_delay_ms(4);
LCD_write_command(0X2);
 248:	82 e0       	ldi	r24, 0x02	; 2
 24a:	0e 94 ac 00 	call	0x158	; 0x158 <LCD_write_command>
LCD_write_command(0X28);
 24e:	88 e2       	ldi	r24, 0x28	; 40
 250:	0e 94 ac 00 	call	0x158	; 0x158 <LCD_write_command>
LCD_write_command(0X08);
 254:	88 e0       	ldi	r24, 0x08	; 8
 256:	0e 94 ac 00 	call	0x158	; 0x158 <LCD_write_command>
LCD_write_command(0X01);
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	0e 94 ac 00 	call	0x158	; 0x158 <LCD_write_command>
LCD_write_command(0X06);
 260:	86 e0       	ldi	r24, 0x06	; 6
 262:	0e 94 ac 00 	call	0x158	; 0x158 <LCD_write_command>
 266:	8f ef       	ldi	r24, 0xFF	; 255
 268:	99 ef       	ldi	r25, 0xF9	; 249
 26a:	a0 e0       	ldi	r26, 0x00	; 0
 26c:	81 50       	subi	r24, 0x01	; 1
 26e:	90 40       	sbci	r25, 0x00	; 0
 270:	a0 40       	sbci	r26, 0x00	; 0
 272:	e1 f7       	brne	.-8      	; 0x26c <LCD_init+0x60>
 274:	00 c0       	rjmp	.+0      	; 0x276 <LCD_init+0x6a>
 276:	00 00       	nop
_delay_ms(20);
LCD_write_command(0x0C);
 278:	8c e0       	ldi	r24, 0x0C	; 12
 27a:	0e 94 ac 00 	call	0x158	; 0x158 <LCD_write_command>
}
 27e:	08 95       	ret

00000280 <LCD_write_char>:
	 EN(0);
	 _delay_ms(1);
}

void LCD_write_char(uint8_t data){
	 RS(1);
 280:	d9 9a       	sbi	0x1b, 1	; 27
	 // send most byte
	 D4(GETBIT(data,4));
 282:	98 2f       	mov	r25, r24
 284:	92 95       	swap	r25
 286:	9f 70       	andi	r25, 0x0F	; 15
 288:	90 ff       	sbrs	r25, 0
 28a:	02 c0       	rjmp	.+4      	; 0x290 <LCD_write_char+0x10>
 28c:	db 9a       	sbi	0x1b, 3	; 27
 28e:	01 c0       	rjmp	.+2      	; 0x292 <LCD_write_char+0x12>
 290:	db 98       	cbi	0x1b, 3	; 27
	 D5(GETBIT(data,5));
 292:	98 2f       	mov	r25, r24
 294:	92 95       	swap	r25
 296:	96 95       	lsr	r25
 298:	97 70       	andi	r25, 0x07	; 7
 29a:	90 ff       	sbrs	r25, 0
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <LCD_write_char+0x22>
 29e:	dc 9a       	sbi	0x1b, 4	; 27
 2a0:	01 c0       	rjmp	.+2      	; 0x2a4 <LCD_write_char+0x24>
 2a2:	dc 98       	cbi	0x1b, 4	; 27
	 D6(GETBIT(data,6));
 2a4:	98 2f       	mov	r25, r24
 2a6:	92 95       	swap	r25
 2a8:	96 95       	lsr	r25
 2aa:	96 95       	lsr	r25
 2ac:	93 70       	andi	r25, 0x03	; 3
 2ae:	90 ff       	sbrs	r25, 0
 2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <LCD_write_char+0x36>
 2b2:	dd 9a       	sbi	0x1b, 5	; 27
 2b4:	01 c0       	rjmp	.+2      	; 0x2b8 <LCD_write_char+0x38>
 2b6:	dd 98       	cbi	0x1b, 5	; 27
	 D7(GETBIT(data,7));
 2b8:	88 23       	and	r24, r24
 2ba:	14 f4       	brge	.+4      	; 0x2c0 <LCD_write_char+0x40>
 2bc:	de 9a       	sbi	0x1b, 6	; 27
 2be:	01 c0       	rjmp	.+2      	; 0x2c2 <LCD_write_char+0x42>
 2c0:	de 98       	cbi	0x1b, 6	; 27
	 EN(1);
 2c2:	da 9a       	sbi	0x1b, 2	; 27
 2c4:	ef e9       	ldi	r30, 0x9F	; 159
 2c6:	ff e0       	ldi	r31, 0x0F	; 15
 2c8:	31 97       	sbiw	r30, 0x01	; 1
 2ca:	f1 f7       	brne	.-4      	; 0x2c8 <LCD_write_char+0x48>
 2cc:	00 c0       	rjmp	.+0      	; 0x2ce <LCD_write_char+0x4e>
 2ce:	00 00       	nop
	 _delay_ms(1);
	 EN(0);
 2d0:	da 98       	cbi	0x1b, 2	; 27
 2d2:	ef e9       	ldi	r30, 0x9F	; 159
 2d4:	ff e0       	ldi	r31, 0x0F	; 15
 2d6:	31 97       	sbiw	r30, 0x01	; 1
 2d8:	f1 f7       	brne	.-4      	; 0x2d6 <LCD_write_char+0x56>
 2da:	00 c0       	rjmp	.+0      	; 0x2dc <LCD_write_char+0x5c>
 2dc:	00 00       	nop
	 _delay_ms(1);
	 
	 // send least byte
	 
	 D4(GETBIT(data,0));
 2de:	80 ff       	sbrs	r24, 0
 2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <LCD_write_char+0x66>
 2e2:	db 9a       	sbi	0x1b, 3	; 27
 2e4:	01 c0       	rjmp	.+2      	; 0x2e8 <LCD_write_char+0x68>
 2e6:	db 98       	cbi	0x1b, 3	; 27
	 D5(GETBIT(data,1));
 2e8:	98 2f       	mov	r25, r24
 2ea:	96 95       	lsr	r25
 2ec:	90 ff       	sbrs	r25, 0
 2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <LCD_write_char+0x74>
 2f0:	dc 9a       	sbi	0x1b, 4	; 27
 2f2:	01 c0       	rjmp	.+2      	; 0x2f6 <LCD_write_char+0x76>
 2f4:	dc 98       	cbi	0x1b, 4	; 27
	 D6(GETBIT(data,2));
 2f6:	98 2f       	mov	r25, r24
 2f8:	96 95       	lsr	r25
 2fa:	96 95       	lsr	r25
 2fc:	90 ff       	sbrs	r25, 0
 2fe:	02 c0       	rjmp	.+4      	; 0x304 <LCD_write_char+0x84>
 300:	dd 9a       	sbi	0x1b, 5	; 27
 302:	01 c0       	rjmp	.+2      	; 0x306 <LCD_write_char+0x86>
 304:	dd 98       	cbi	0x1b, 5	; 27
	 D7(GETBIT(data,3));
 306:	86 95       	lsr	r24
 308:	86 95       	lsr	r24
 30a:	86 95       	lsr	r24
 30c:	80 ff       	sbrs	r24, 0
 30e:	02 c0       	rjmp	.+4      	; 0x314 <LCD_write_char+0x94>
 310:	de 9a       	sbi	0x1b, 6	; 27
 312:	01 c0       	rjmp	.+2      	; 0x316 <LCD_write_char+0x96>
 314:	de 98       	cbi	0x1b, 6	; 27
	 EN(1);
 316:	da 9a       	sbi	0x1b, 2	; 27
 318:	8f e9       	ldi	r24, 0x9F	; 159
 31a:	9f e0       	ldi	r25, 0x0F	; 15
 31c:	01 97       	sbiw	r24, 0x01	; 1
 31e:	f1 f7       	brne	.-4      	; 0x31c <LCD_write_char+0x9c>
 320:	00 c0       	rjmp	.+0      	; 0x322 <LCD_write_char+0xa2>
 322:	00 00       	nop
	 _delay_ms(1);
	 EN(0);
 324:	da 98       	cbi	0x1b, 2	; 27
 326:	ef e9       	ldi	r30, 0x9F	; 159
 328:	ff e0       	ldi	r31, 0x0F	; 15
 32a:	31 97       	sbiw	r30, 0x01	; 1
 32c:	f1 f7       	brne	.-4      	; 0x32a <LCD_write_char+0xaa>
 32e:	00 c0       	rjmp	.+0      	; 0x330 <LCD_write_char+0xb0>
 330:	00 00       	nop
	 _delay_ms(1);
}
 332:	08 95       	ret

00000334 <LCD_write_string>:
void LCD_write_string(uint8_t txt[]){
 334:	0f 93       	push	r16
 336:	1f 93       	push	r17
 338:	cf 93       	push	r28
 33a:	8c 01       	movw	r16, r24
	for (uint8_t i=0;txt[i]!='\0';i++){
 33c:	fc 01       	movw	r30, r24
 33e:	80 81       	ld	r24, Z
 340:	88 23       	and	r24, r24
 342:	51 f0       	breq	.+20     	; 0x358 <LCD_write_string+0x24>
 344:	c0 e0       	ldi	r28, 0x00	; 0
		LCD_write_char(txt[i]);
 346:	0e 94 40 01 	call	0x280	; 0x280 <LCD_write_char>
	 _delay_ms(1);
	 EN(0);
	 _delay_ms(1);
}
void LCD_write_string(uint8_t txt[]){
	for (uint8_t i=0;txt[i]!='\0';i++){
 34a:	cf 5f       	subi	r28, 0xFF	; 255
 34c:	f8 01       	movw	r30, r16
 34e:	ec 0f       	add	r30, r28
 350:	f1 1d       	adc	r31, r1
 352:	80 81       	ld	r24, Z
 354:	88 23       	and	r24, r24
 356:	b9 f7       	brne	.-18     	; 0x346 <LCD_write_string+0x12>
		LCD_write_char(txt[i]);
	}
}
 358:	cf 91       	pop	r28
 35a:	1f 91       	pop	r17
 35c:	0f 91       	pop	r16
 35e:	08 95       	ret

00000360 <LCD_write_num>:
void LCD_write_num(uint32_t num){
 360:	8f 92       	push	r8
 362:	9f 92       	push	r9
 364:	af 92       	push	r10
 366:	bf 92       	push	r11
 368:	ef 92       	push	r14
 36a:	ff 92       	push	r15
 36c:	1f 93       	push	r17
 36e:	cf 93       	push	r28
 370:	df 93       	push	r29
 372:	cd b7       	in	r28, 0x3d	; 61
 374:	de b7       	in	r29, 0x3e	; 62
 376:	2a 97       	sbiw	r28, 0x0a	; 10
 378:	0f b6       	in	r0, 0x3f	; 63
 37a:	f8 94       	cli
 37c:	de bf       	out	0x3e, r29	; 62
 37e:	0f be       	out	0x3f, r0	; 63
 380:	cd bf       	out	0x3d, r28	; 61
 382:	dc 01       	movw	r26, r24
 384:	cb 01       	movw	r24, r22
uint8_t txt[10] = {0};
 386:	ae 01       	movw	r20, r28
 388:	4f 5f       	subi	r20, 0xFF	; 255
 38a:	5f 4f       	sbci	r21, 0xFF	; 255
 38c:	2a e0       	ldi	r18, 0x0A	; 10
 38e:	fa 01       	movw	r30, r20
 390:	11 92       	st	Z+, r1
 392:	2a 95       	dec	r18
 394:	e9 f7       	brne	.-6      	; 0x390 <LCD_write_num+0x30>
int8_t i = 0;
if(num == 0) {
 396:	00 97       	sbiw	r24, 0x00	; 0
 398:	a1 05       	cpc	r26, r1
 39a:	b1 05       	cpc	r27, r1
 39c:	21 f4       	brne	.+8      	; 0x3a6 <LCD_write_num+0x46>
	LCD_write_char('0');
 39e:	80 e3       	ldi	r24, 0x30	; 48
 3a0:	0e 94 40 01 	call	0x280	; 0x280 <LCD_write_char>
	return;
 3a4:	38 c0       	rjmp	.+112    	; 0x416 <LCD_write_num+0xb6>
	}
}
void LCD_write_num(uint32_t num){
uint8_t txt[10] = {0};
int8_t i = 0;
if(num == 0) {
 3a6:	10 e0       	ldi	r17, 0x00	; 0
	LCD_write_char('0');
	return;
}
for (i = 0; num != 0; i++ )
{
	txt[i] = num%10 + 48;
 3a8:	0f 2e       	mov	r0, r31
 3aa:	fa e0       	ldi	r31, 0x0A	; 10
 3ac:	8f 2e       	mov	r8, r31
 3ae:	f0 e0       	ldi	r31, 0x00	; 0
 3b0:	9f 2e       	mov	r9, r31
 3b2:	f0 e0       	ldi	r31, 0x00	; 0
 3b4:	af 2e       	mov	r10, r31
 3b6:	f0 e0       	ldi	r31, 0x00	; 0
 3b8:	bf 2e       	mov	r11, r31
 3ba:	f0 2d       	mov	r31, r0
 3bc:	e1 2e       	mov	r14, r17
 3be:	ff 24       	eor	r15, r15
 3c0:	e7 fc       	sbrc	r14, 7
 3c2:	f0 94       	com	r15
 3c4:	21 e0       	ldi	r18, 0x01	; 1
 3c6:	30 e0       	ldi	r19, 0x00	; 0
 3c8:	2c 0f       	add	r18, r28
 3ca:	3d 1f       	adc	r19, r29
 3cc:	e2 0e       	add	r14, r18
 3ce:	f3 1e       	adc	r15, r19
 3d0:	bc 01       	movw	r22, r24
 3d2:	cd 01       	movw	r24, r26
 3d4:	a5 01       	movw	r20, r10
 3d6:	94 01       	movw	r18, r8
 3d8:	0e 94 41 02 	call	0x482	; 0x482 <__udivmodsi4>
 3dc:	60 5d       	subi	r22, 0xD0	; 208
 3de:	f7 01       	movw	r30, r14
 3e0:	60 83       	st	Z, r22
	num = num  / 10 ;
 3e2:	82 2f       	mov	r24, r18
 3e4:	93 2f       	mov	r25, r19
 3e6:	a4 2f       	mov	r26, r20
 3e8:	b5 2f       	mov	r27, r21
int8_t i = 0;
if(num == 0) {
	LCD_write_char('0');
	return;
}
for (i = 0; num != 0; i++ )
 3ea:	1f 5f       	subi	r17, 0xFF	; 255
 3ec:	00 97       	sbiw	r24, 0x00	; 0
 3ee:	a1 05       	cpc	r26, r1
 3f0:	b1 05       	cpc	r27, r1
 3f2:	21 f7       	brne	.-56     	; 0x3bc <LCD_write_num+0x5c>
{
	txt[i] = num%10 + 48;
	num = num  / 10 ;
}
i--;
 3f4:	11 50       	subi	r17, 0x01	; 1
while(i >= 0){
 3f6:	7a f0       	brmi	.+30     	; 0x416 <LCD_write_num+0xb6>
	LCD_write_char(txt[i]);
 3f8:	e1 2f       	mov	r30, r17
 3fa:	ff 27       	eor	r31, r31
 3fc:	e7 fd       	sbrc	r30, 7
 3fe:	f0 95       	com	r31
 400:	21 e0       	ldi	r18, 0x01	; 1
 402:	30 e0       	ldi	r19, 0x00	; 0
 404:	2c 0f       	add	r18, r28
 406:	3d 1f       	adc	r19, r29
 408:	e2 0f       	add	r30, r18
 40a:	f3 1f       	adc	r31, r19
 40c:	80 81       	ld	r24, Z
 40e:	0e 94 40 01 	call	0x280	; 0x280 <LCD_write_char>
	i--;
 412:	11 50       	subi	r17, 0x01	; 1
 414:	88 f7       	brcc	.-30     	; 0x3f8 <LCD_write_num+0x98>
}
 416:	2a 96       	adiw	r28, 0x0a	; 10
 418:	0f b6       	in	r0, 0x3f	; 63
 41a:	f8 94       	cli
 41c:	de bf       	out	0x3e, r29	; 62
 41e:	0f be       	out	0x3f, r0	; 63
 420:	cd bf       	out	0x3d, r28	; 61
 422:	df 91       	pop	r29
 424:	cf 91       	pop	r28
 426:	1f 91       	pop	r17
 428:	ff 90       	pop	r15
 42a:	ef 90       	pop	r14
 42c:	bf 90       	pop	r11
 42e:	af 90       	pop	r10
 430:	9f 90       	pop	r9
 432:	8f 90       	pop	r8
 434:	08 95       	ret

00000436 <main>:
#include "keypad.h"

int main(void)
{
	int8_t key;
	LCD_init();
 436:	0e 94 06 01 	call	0x20c	; 0x20c <LCD_init>
	keypad_init();
 43a:	0e 94 49 00 	call	0x92	; 0x92 <keypad_init>
	LCD_write_string("10/?=2");
 43e:	80 e7       	ldi	r24, 0x70	; 112
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	0e 94 9a 01 	call	0x334	; 0x334 <LCD_write_string>
	key=keypad_read();	
	if (key!=-1 && key=='5')
	{
		LCD_write_command(0x1);
		LCD_write_command(0x83);
		LCD_write_string("well done");
 446:	07 e7       	ldi	r16, 0x77	; 119
 448:	10 e0       	ldi	r17, 0x00	; 0
	}
	else if (key !=-1 && key!='5') {
		LCD_write_command(0x1);
		LCD_write_command(0x83);
		LCD_write_string("wrong answer");
 44a:	c1 e8       	ldi	r28, 0x81	; 129
 44c:	d0 e0       	ldi	r29, 0x00	; 0
	LCD_init();
	keypad_init();
	LCD_write_string("10/?=2");
	while(1)
    {
	key=keypad_read();	
 44e:	0e 94 55 00 	call	0xaa	; 0xaa <keypad_read>
	if (key!=-1 && key=='5')
 452:	85 33       	cpi	r24, 0x35	; 53
 454:	51 f4       	brne	.+20     	; 0x46a <main+0x34>
	{
		LCD_write_command(0x1);
 456:	81 e0       	ldi	r24, 0x01	; 1
 458:	0e 94 ac 00 	call	0x158	; 0x158 <LCD_write_command>
		LCD_write_command(0x83);
 45c:	83 e8       	ldi	r24, 0x83	; 131
 45e:	0e 94 ac 00 	call	0x158	; 0x158 <LCD_write_command>
		LCD_write_string("well done");
 462:	c8 01       	movw	r24, r16
 464:	0e 94 9a 01 	call	0x334	; 0x334 <LCD_write_string>
 468:	f2 cf       	rjmp	.-28     	; 0x44e <main+0x18>
	}
	else if (key !=-1 && key!='5') {
 46a:	8f 3f       	cpi	r24, 0xFF	; 255
 46c:	81 f3       	breq	.-32     	; 0x44e <main+0x18>
		LCD_write_command(0x1);
 46e:	81 e0       	ldi	r24, 0x01	; 1
 470:	0e 94 ac 00 	call	0x158	; 0x158 <LCD_write_command>
		LCD_write_command(0x83);
 474:	83 e8       	ldi	r24, 0x83	; 131
 476:	0e 94 ac 00 	call	0x158	; 0x158 <LCD_write_command>
		LCD_write_string("wrong answer");
 47a:	ce 01       	movw	r24, r28
 47c:	0e 94 9a 01 	call	0x334	; 0x334 <LCD_write_string>
 480:	e6 cf       	rjmp	.-52     	; 0x44e <main+0x18>

00000482 <__udivmodsi4>:
 482:	a1 e2       	ldi	r26, 0x21	; 33
 484:	1a 2e       	mov	r1, r26
 486:	aa 1b       	sub	r26, r26
 488:	bb 1b       	sub	r27, r27
 48a:	fd 01       	movw	r30, r26
 48c:	0d c0       	rjmp	.+26     	; 0x4a8 <__udivmodsi4_ep>

0000048e <__udivmodsi4_loop>:
 48e:	aa 1f       	adc	r26, r26
 490:	bb 1f       	adc	r27, r27
 492:	ee 1f       	adc	r30, r30
 494:	ff 1f       	adc	r31, r31
 496:	a2 17       	cp	r26, r18
 498:	b3 07       	cpc	r27, r19
 49a:	e4 07       	cpc	r30, r20
 49c:	f5 07       	cpc	r31, r21
 49e:	20 f0       	brcs	.+8      	; 0x4a8 <__udivmodsi4_ep>
 4a0:	a2 1b       	sub	r26, r18
 4a2:	b3 0b       	sbc	r27, r19
 4a4:	e4 0b       	sbc	r30, r20
 4a6:	f5 0b       	sbc	r31, r21

000004a8 <__udivmodsi4_ep>:
 4a8:	66 1f       	adc	r22, r22
 4aa:	77 1f       	adc	r23, r23
 4ac:	88 1f       	adc	r24, r24
 4ae:	99 1f       	adc	r25, r25
 4b0:	1a 94       	dec	r1
 4b2:	69 f7       	brne	.-38     	; 0x48e <__udivmodsi4_loop>
 4b4:	60 95       	com	r22
 4b6:	70 95       	com	r23
 4b8:	80 95       	com	r24
 4ba:	90 95       	com	r25
 4bc:	9b 01       	movw	r18, r22
 4be:	ac 01       	movw	r20, r24
 4c0:	bd 01       	movw	r22, r26
 4c2:	cf 01       	movw	r24, r30
 4c4:	08 95       	ret

000004c6 <_exit>:
 4c6:	f8 94       	cli

000004c8 <__stop_program>:
 4c8:	ff cf       	rjmp	.-2      	; 0x4c8 <__stop_program>
